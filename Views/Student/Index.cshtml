@model University_Portal.ViewModels.SearchViewModel
@{
    Layout = "~/Views/Shared/MyLayout.cshtml";
    ViewData["Title"] = "Students";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">
        <i class="fas fa-user-graduate me-2 text-primary"></i>All Students
        <small class="text-muted">(@Model.TotalCount found)</small>
    </h1>
    @Html.ActionLink("Add New Student", "Add", "Student", null, new { @class = "btn btn-success" })
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Search and Filter Panel -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-search me-2"></i>Search & Filter Students
            <button class="btn btn-link btn-sm float-end" type="button" data-bs-toggle="collapse" 
                    data-bs-target="#searchPanel" aria-expanded="true">
                <i class="fas fa-chevron-down"></i>
            </button>
        </h5>
    </div>
    <div class="collapse show" id="searchPanel">
        <div class="card-body">
            @using (Html.BeginForm("Index", "Student", FormMethod.Get, new { @class = "row g-3" }))
            {
                <div class="col-md-4">
                    <label class="form-label">Search Name or Course</label>
                    @Html.TextBoxFor(m => m.SearchTerm, new { 
                        @class = "form-control", 
                        placeholder = "Enter student or course name..." 
                    })
                </div>
                
                <div class="col-md-2">
                    <label class="form-label">Course</label>
                    @Html.DropDownListFor(m => m.SelectedCourseId, 
                        new SelectList(Model.Courses, "Id", "Name", Model.SelectedCourseId), 
                        "All Courses", 
                        new { @class = "form-select" })
                </div>
                
                <div class="col-md-2">
                    <label class="form-label">Min Level</label>
                    @Html.EditorFor(m => m.MinLevel, new { 
                        htmlAttributes = new { @class = "form-control", min = "1", max = "5", placeholder = "Min" } 
                    })
                </div>
                
                <div class="col-md-2">
                    <label class="form-label">Max Level</label>
                    @Html.EditorFor(m => m.MaxLevel, new { 
                        htmlAttributes = new { @class = "form-control", min = "1", max = "5", placeholder = "Max" } 
                    })
                </div>
                
                <div class="col-md-2">
                    <label class="form-label">Sort By</label>
                    @Html.DropDownListFor(m => m.SortBy, 
                        new SelectList(new[] {
                            new { Value = "Name", Text = "Name" },
                            new { Value = "Age", Text = "Age" },
                            new { Value = "Level", Text = "Level" },
                            new { Value = "Course", Text = "Course" }
                        }, "Value", "Text", Model.SortBy), 
                        new { @class = "form-select" })
                </div>
                
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-search me-1"></i>Search
                    </button>
                    <a href="@Url.Action("Index", "Student")" class="btn btn-outline-secondary">
                        <i class="fas fa-times me-1"></i>Clear
                    </a>
                    <div class="btn-group float-end" role="group">
                        @Html.Hidden("SortOrder", Model.SortOrder)
                        <button type="button" class="btn btn-outline-info btn-sm" onclick="toggleSort()">
                            <i class="fas fa-sort me-1"></i>
                            @(Model.SortOrder == "asc" ? "Ascending" : "Descending")
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (!Model.Students.Any())
{
    <div class="alert alert-info text-center">
        <i class="fas fa-info-circle me-2"></i>
        @if (!string.IsNullOrWhiteSpace(Model.SearchTerm) || Model.SelectedCourseId.HasValue)
        {
            <text>No students found matching your search criteria.</text>
        }
        else
        {
            <text>No students found. <a href="@Url.Action("Add", "Student")" class="alert-link">Add the first student</a>.</text>
        }
    </div>
}
else
{
    <div class="card shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover table-striped mb-0">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Student</th>
                           
                            <th>Level</th>
                            <th>Course</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in Model.Students)
                        {
                            <tr>
                                <td class="fw-bold">#@student.Id</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        @if (!string.IsNullOrEmpty(student.Image) && student.Image != "default.png")
                                        {
                                            <img src="~/Images/@student.Image" class="rounded-circle me-2" 
                                                 style="width: 40px; height: 40px; object-fit: cover;" alt="Student">
                                        }
                                        else
                                        {
                                            <i class="fas fa-user-circle text-muted me-2" style="font-size: 40px;"></i>
                                        }
                                        <div>
                                            <div class="fw-bold">@student.Name</div>
                                            <small class="text-muted">@student.Age years old</small>
                                        </div>
                                    </div>
                                </td>
                               
                                <td>
                                    <span class="badge bg-primary">Level @student.Level</span>
                                </td>
                                <td>
                                    <div>
                                        <span class="fw-bold">@student.Course.Name</span>
                                        <small class="text-muted d-block">@student.Course.Credits credit(s)</small>
                                    </div>
                                </td>
                                <td class="text-center">
                                    @Html.ActionLink("Details", "Details", "Student", 
                                        new { Id = student.Id }, 
                                        new { @class = "btn btn-outline-primary btn-sm" })
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="card-footer">
                <nav>
                    <ul class="pagination justify-content-center mb-0">
                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { 
                                SearchTerm = Model.SearchTerm, 
                                SelectedCourseId = Model.SelectedCourseId,
                                MinLevel = Model.MinLevel,
                                MaxLevel = Model.MaxLevel,
                                SortBy = Model.SortBy,
                                SortOrder = Model.SortOrder,
                                CurrentPage = Model.CurrentPage - 1 
                            })">Previous</a>
                        </li>
                        
                        @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { 
                                    SearchTerm = Model.SearchTerm, 
                                    SelectedCourseId = Model.SelectedCourseId,
                                    MinLevel = Model.MinLevel,
                                    MaxLevel = Model.MaxLevel,
                                    SortBy = Model.SortBy,
                                    SortOrder = Model.SortOrder,
                                    CurrentPage = i 
                                })">@i</a>
                            </li>
                        }
                        
                        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { 
                                SearchTerm = Model.SearchTerm, 
                                SelectedCourseId = Model.SelectedCourseId,
                                MinLevel = Model.MinLevel,
                                MaxLevel = Model.MaxLevel,
                                SortBy = Model.SortBy,
                                SortOrder = Model.SortOrder,
                                CurrentPage = Model.CurrentPage + 1 
                            })">Next</a>
                        </li>
                    </ul>
                </nav>
                
                <div class="text-center mt-2">
                    <small class="text-muted">
                        Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to 
                        @(Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalCount)) of @Model.TotalCount students
                    </small>
                </div>
            </div>
        }
    </div>
}

@section Scripts {
    <script>
        function toggleSort() {
            var currentOrder = document.querySelector('input[name="SortOrder"]').value;
            var newOrder = currentOrder === 'asc' ? 'desc' : 'asc';
            document.querySelector('input[name="SortOrder"]').value = newOrder;
            document.querySelector('form').submit();
        }
    </script>
}