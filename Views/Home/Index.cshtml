@model University_Portal.ViewModels.DashboardViewModel
@{
	ViewData["Title"] = "Dashboard";
}

@section Styles {
	<style>
		.dashboard-card {
			border: none;
			border-radius: 15px;
			box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
			transition: transform 0.3s ease, box-shadow 0.3s ease;
		}

			.dashboard-card:hover {
				transform: translateY(-5px);
				box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
			}

		.stat-card {
			background: linear-gradient(135deg, var(--bs-primary) 0%, var(--bs-primary-dark, #0056b3) 100%);
			color: white;
			border-radius: 15px;
			padding: 2rem;
			margin-bottom: 1.5rem;
			position: relative;
			overflow: hidden;
		}

			.stat-card::before {
				content: '';
				position: absolute;
				top: 0;
				right: 0;
				width: 100px;
				height: 100px;
				background: rgba(255, 255, 255, 0.1);
				border-radius: 50%;
				transform: translate(30%, -30%);
			}

			.stat-card.success {
				background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
			}

			.stat-card.warning {
				background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
			}

			.stat-card.info {
				background: linear-gradient(135deg, #17a2b8 0%, #6f42c1 100%);
			}

		.stat-number {
			font-size: 2.5rem;
			font-weight: bold;
			margin: 0;
		}

		.chart-container {
			height: 300px;
			position: relative;
		}

		.activity-item {
			padding: 1rem;
			border-left: 4px solid var(--bs-primary);
			margin-bottom: 1rem;
			background: rgba(0, 123, 255, 0.05);
			border-radius: 0 10px 10px 0;
			transition: all 0.3s ease;
		}

			.activity-item:hover {
				background: rgba(0, 123, 255, 0.1);
				transform: translateX(5px);
			}

		.welcome-hero {
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			color: white;
			padding: 3rem 2rem;
			border-radius: 20px;
			margin-bottom: 2rem;
			position: relative;
			overflow: hidden;
		}

			.welcome-hero::before {
				content: '';
				position: absolute;
				top: -50%;
				right: -50%;
				width: 200%;
				height: 200%;
				background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
				animation: pulse 4s ease-in-out infinite;
			}

		@@keyframes pulse {
			0%, 100%

		{
			opacity: 0.5;
		}

		50% {
			opacity: 0.8;
		}

		}

		.level-badge {
			display: inline-block;
			padding: 0.5rem 1rem;
			border-radius: 20px;
			font-weight: bold;
			margin: 0.25rem;
			background: linear-gradient(45deg, #667eea, #764ba2);
			color: white;
		}
	</style>
}

<!-- Welcome Hero Section -->
<div class="welcome-hero text-center">
	<div class="position-relative">
		<h1 class="display-4 fw-bold mb-3">
			<i class="fas fa-graduation-cap me-3"></i>
			Welcome to University Portal
		</h1>
		<p class="lead mb-4">
			Your complete solution for managing students, courses, and academic excellence
		</p>
		<div class="row justify-content-center">
			<div class="col-md-6">
				<div class="d-grid gap-2 d-md-flex justify-content-md-center">
					<a href="@Url.Action("Add", "Student")" class="btn btn-light btn-lg me-md-2">
						<i class="fas fa-user-plus me-2"></i>Add Student
					</a>
					<a href="@Url.Action("Add", "Course")" class="btn btn-outline-light btn-lg">
						<i class="fas fa-plus me-2"></i>Add Course
					</a>
				</div>
			</div>
		</div>
	</div>
</div>

@if (ViewBag.Error != null)
{
	<div class="alert alert-danger">
		<i class="fas fa-exclamation-triangle me-2"></i>@ViewBag.Error
	</div>
}

<!-- Statistics Cards -->
<div class="row mb-4">
	<div class="col-lg-3 col-md-6">
		<div class="stat-card">
			<div class="d-flex justify-content-between align-items-center">
				<div>
					<h6 class="text-white-50 mb-2">Total Students</h6>
					<p class="stat-number">@Model.TotalStudents</p>
					<small class="text-white-50">
						<i class="fas fa-arrow-up me-1"></i>
						+@Model.StudentsThisMonth this month
					</small>
				</div>
				<div class="text-end">
					<i class="fas fa-user-graduate fa-3x opacity-75"></i>
				</div>
			</div>
		</div>
	</div>

	<div class="col-lg-3 col-md-6">
		<div class="stat-card success">
			<div class="d-flex justify-content-between align-items-center">
				<div>
					<h6 class="text-white-50 mb-2">Total Courses</h6>
					<p class="stat-number">@Model.TotalCourses</p>
					<small class="text-white-50">
						<i class="fas fa-arrow-up me-1"></i>
						+@Model.CoursesThisMonth this month
					</small>
				</div>
				<div class="text-end">
					<i class="fas fa-book fa-3x opacity-75"></i>
				</div>
			</div>
		</div>
	</div>

	<div class="col-lg-3 col-md-6">
		<div class="stat-card warning">
			<div class="d-flex justify-content-between align-items-center">
				<div>
					<h6 class="text-white-50 mb-2">Total Enrollments</h6>
					<p class="stat-number">@Model.TotalEnrollments</p>
					<small class="text-white-50">
						<i class="fas fa-users me-1"></i>
						Active students
					</small>
				</div>
				<div class="text-end">
					<i class="fas fa-clipboard-list fa-3x opacity-75"></i>
				</div>
			</div>
		</div>
	</div>

	<div class="col-lg-3 col-md-6">
		<div class="stat-card info">
			<div class="d-flex justify-content-between align-items-center">
				<div>
					<h6 class="text-white-50 mb-2">Avg per Course</h6>
					<p class="stat-number">@Model.AverageStudentsPerCourse</p>
					<small class="text-white-50">
						<i class="fas fa-chart-line me-1"></i>
						Students per course
					</small>
				</div>
				<div class="text-end">
					<i class="fas fa-calculator fa-3x opacity-75"></i>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Charts and Data Section -->
<div class="row">
	<!-- Course Enrollment Chart -->
	<div class="col-lg-8">
		<div class="card dashboard-card mb-4">
			<div class="card-header bg-primary text-white">
				<h5 class="mb-0">
					<i class="fas fa-chart-bar me-2"></i>Course Enrollment Statistics
				</h5>
			</div>
			<div class="card-body">
				@if (Model.CourseStats.Any())
				{
					<div class="chart-container">
						<canvas id="courseChart"></canvas>
					</div>

					<div class="mt-3">
						<h6 class="text-muted">Top Courses by Enrollment:</h6>
						<div class="row">
							@foreach (var course in Model.CourseStats.Take(3))
							{
								<div class="col-md-4 mb-2">
									<div class="d-flex align-items-center p-2 bg-light rounded">
										<div class="flex-shrink-0 me-3">
											<div class="bg-primary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
												<i class="fas fa-book text-white"></i>
											</div>
										</div>
										<div class="flex-grow-1">
											<h6 class="mb-0">@course.CourseName</h6>
											<small class="text-muted">@course.StudentCount students â€¢ @course.Credits credits</small>
										</div>
									</div>
								</div>
							}
						</div>
					</div>
				}
				else
				{
					<div class="text-center py-5">
						<i class="fas fa-chart-bar fa-3x text-muted mb-3"></i>
						<h5 class="text-muted">No course data available</h5>
						<p class="text-muted">Add some courses and students to see enrollment statistics</p>
					</div>
				}
			</div>
		</div>
	</div>

	<!-- Level Distribution & Recent Activities -->
	<div class="col-lg-4">
		<!-- Level Distribution -->
		<div class="card dashboard-card mb-4">
			<div class="card-header bg-success text-white">
				<h6 class="mb-0">
					<i class="fas fa-layer-group me-2"></i>Students by Level
				</h6>
			</div>
			<div class="card-body">
				@if (Model.LevelStats.Any())
				{
					@foreach (var level in Model.LevelStats)
					{
						<div class="d-flex justify-content-between align-items-center mb-3">
							<span class="level-badge">Level @level.Level</span>
							<div class="flex-grow-1 mx-3">
								<div class="progress" style="height: 10px;">
									<div class="progress-bar bg-success" style="width: @level.Percentage%"></div>
								</div>
							</div>
							<span class="fw-bold">@level.StudentCount</span>
						</div>
					}
				}
				else
				{
					<div class="text-center py-3">
						<i class="fas fa-layer-group fa-2x text-muted mb-2"></i>
						<p class="text-muted mb-0">No level data available</p>
					</div>
				}
			</div>
		</div>

		<!-- Most Popular Course -->
		@if (!string.IsNullOrEmpty(Model.MostPopularCourse))
		{
			<div class="card dashboard-card mb-4">
				<div class="card-body text-center">
					<div class="mb-3">
						<i class="fas fa-trophy fa-3x text-warning"></i>
					</div>
					<h6 class="text-muted">Most Popular Course</h6>
					<h5 class="fw-bold text-primary">@Model.MostPopularCourse</h5>
					<p class="text-muted mb-0">@Model.MostPopularCourseCount students enrolled</p>
				</div>
			</div>
		}
	</div>
</div>

<!-- Recent Activities -->
<div class="row">
	<div class="col-12">
		<div class="card dashboard-card">
			<div class="card-header bg-info text-white">
				<h5 class="mb-0">
					<i class="fas fa-clock me-2"></i>Recent Activities
				</h5>
			</div>
			<div class="card-body">
				@if (Model.RecentActivities.Any())
				{
					<div class="row">
						@foreach (var activity in Model.RecentActivities)
						{
							<div class="col-md-6 col-lg-4 mb-3">
								<div class="activity-item">
									<div class="d-flex align-items-center">
										<div class="flex-shrink-0 me-3">
											<i class="@activity.Icon text-@activity.Color fa-lg"></i>
										</div>
										<div class="flex-grow-1">
											<h6 class="mb-1">@activity.ActivityType</h6>
											<p class="mb-1 text-muted small">@activity.Description</p>
											<small class="text-muted">
												<i class="fas fa-clock me-1"></i>
												@activity.Timestamp.ToString("MMM dd, yyyy HH:mm")
											</small>
										</div>
									</div>
								</div>
							</div>
						}
					</div>
				}
				else
				{
					<div class="text-center py-4">
						<i class="fas fa-history fa-3x text-muted mb-3"></i>
						<h5 class="text-muted">No recent activities</h5>
						<p class="text-muted">Activity feed will appear here as you use the system</p>
					</div>
				}
			</div>
		</div>
	</div>
</div>

<!-- Quick Actions -->
<div class="row mt-4">
	<div class="col-12">
		<div class="card dashboard-card">
			<div class="card-header bg-dark text-white">
				<h5 class="mb-0">
					<i class="fas fa-bolt me-2"></i>Quick Actions
				</h5>
			</div>
			<div class="card-body">
				<div class="row text-center">
					<div class="col-lg-3 col-md-6 mb-3">
						<a href="@Url.Action("Index", "Student")" class="btn btn-outline-primary btn-lg w-100 py-3">
							<i class="fas fa-users fa-2x d-block mb-2"></i>
							<span>View All Students</span>
							<small class="d-block text-muted">@Model.TotalStudents registered</small>
						</a>
					</div>
					<div class="col-lg-3 col-md-6 mb-3">
						<a href="@Url.Action("Add", "Student")" class="btn btn-outline-success btn-lg w-100 py-3">
							<i class="fas fa-user-plus fa-2x d-block mb-2"></i>
							<span>Add New Student</span>
							<small class="d-block text-muted">Register student</small>
						</a>
					</div>
					<div class="col-lg-3 col-md-6 mb-3">
						<a href="@Url.Action("Index", "Course")" class="btn btn-outline-warning btn-lg w-100 py-3">
							<i class="fas fa-book fa-2x d-block mb-2"></i>
							<span>Manage Courses</span>
							<small class="d-block text-muted">@Model.TotalCourses available</small>
						</a>
					</div>
					<div class="col-lg-3 col-md-6 mb-3">
						<button class="btn btn-outline-info btn-lg w-100 py-3" onclick="generateReport()">
							<i class="fas fa-chart-bar fa-2x d-block mb-2"></i>
							<span>Generate Report</span>
							<small class="d-block text-muted">Export data</small>
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		// Course Enrollment Chart
		@if (Model.CourseStats.Any())
		{
			<text>
			const ctx = document.getElementById('courseChart').getContext('2d');
			const courseChart = new Chart(ctx, {
				type: 'bar',
				data: {
					labels: [@Html.Raw(string.Join(",", Model.CourseStats.Select(c => $"'{c.CourseName}'")))],
					datasets: [{
						label: 'Number of Students',
						data: [@string.Join(",", Model.CourseStats.Select(c => c.StudentCount))],
						backgroundColor: [
							'rgba(54, 162, 235, 0.8)',
							'rgba(255, 99, 132, 0.8)',
							'rgba(255, 205, 86, 0.8)',
							'rgba(75, 192, 192, 0.8)',
							'rgba(153, 102, 255, 0.8)'
						],
						borderColor: [
							'rgba(54, 162, 235, 1)',
							'rgba(255, 99, 132, 1)',
							'rgba(255, 205, 86, 1)',
							'rgba(75, 192, 192, 1)',
							'rgba(153, 102, 255, 1)'
						],
						borderWidth: 2,
						borderRadius: 8,
						borderSkipped: false,
					}]
				},
				options: {
					responsive: true,
					maintainAspectRatio: false,
					plugins: {
						legend: {
							display: false
						},
						tooltip: {
							backgroundColor: 'rgba(0,0,0,0.8)',
							titleColor: 'white',
							bodyColor: 'white',
							cornerRadius: 8,
						}
					},
					scales: {
						y: {
							beginAtZero: true,
							grid: {
								color: 'rgba(0,0,0,0.1)'
							},
							ticks: {
								stepSize: 1
							}
						},
						x: {
							grid: {
								display: false
							}
						}
					}
				}
			});
			</text>
		}

		function generateReport() {
			// Redirect to reports page
			window.location.href = '@Url.Action("Index", "Reports")';
		}

		// Add some interactive animations
		document.addEventListener('DOMContentLoaded', function() {
			// Animate statistics on load
			const statNumbers = document.querySelectorAll('.stat-number');
			statNumbers.forEach(function(stat) {
				const finalValue = parseInt(stat.textContent);
				let currentValue = 0;
				const increment = finalValue / 20;
				const timer = setInterval(function() {
					currentValue += increment;
					if (currentValue >= finalValue) {
						currentValue = finalValue;
						clearInterval(timer);
					}
					stat.textContent = Math.floor(currentValue);
				}, 50);
			});
		});
	</script>
}